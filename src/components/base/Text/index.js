/** @format */

import React from 'react';
import { StyleSheet, Text as RNText } from 'react-native';
import {
  handleFlex,
  handleFlexGrow,
  handleFlexShrink,
  handleRound,
  handleSquare,
} from '@components/shared';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { hs, vs } from '@responsive';
import { COLORS, FONTS } from '@theme';
import styles from './styles';

const Text = ({
  //layout
  flex,
  flexGrow,
  flexShrink,
  row,
  column,
  spaceBetween,
  spaceAround,
  spaceEvenly,
  wrap,
  rowCenter,
  alignStart,
  alignCenter,
  alignEnd,
  justifyStart,
  justifyCenter,
  justifyEnd,
  overflow,
  alignSelf,
  zIndex,
  //size
  padding,
  margin,
  paddingTop,
  paddingRight,
  paddingBottom,
  paddingLeft,
  marginTop,
  marginRight,
  marginBottom,
  marginLeft,
  paddingVertical,
  paddingHorizontal,
  marginVertical,
  marginHorizontal,
  radius,
  borderTopLeftRadius,
  borderTopRightRadius,
  borderWidth,
  borderTopWidth,
  borderRightWidth,
  borderBottomWidth,
  borderLeftWidth,
  translateY,
  safeAreaTop,
  safeAreaBottom,
  //width, height
  width,
  height,
  maxWidth,
  maxHeight,
  square,
  round,
  //color
  backgroundColor,
  borderColor,
  color = COLORS.textColor,
  opacity,
  //font
  h1,
  h2,
  h3,
  h4,
  h5,
  title,
  large,
  medium,
  mediumItalic,
  small,
  tiny,
  light,
  lightItalic,
  normal,
  regular,
  regularItalic,
  semiBold,
  semiBoldItalic,
  bold,
  boldItalic,
  extraBold,
  extraBoldItalic,
  heavy,
  block,
  //text style
  center,
  right,
  fontSize,
  sizeMedium,
  fontFamily = FONTS.Regular,
  italic,
  uppercase,
  lowercase,
  capitalize,
  underline,
  lineThrough,
  underlineLineThrough,
  includeFontPadding = false,
  lineHeight,
  letterSpacing,
  numberOfLines,
  style,
  children,
  //position
  relative,
  absolute,
  absoluteFillObject,
  positionTop,
  positionRight,
  positionBottom,
  positionLeft,
  ...rest
}) => {
  const insets = useSafeAreaInsets();

  const customStyles = [
    //default
    { color: COLORS.textPrimary },
    // layout
    flex && handleFlex(flex),
    flexShrink && handleFlexShrink(flexShrink),
    flexGrow && handleFlexGrow(flexGrow),
    row && { flexDirection: 'row' },
    column && { flexDirection: 'column' },
    spaceBetween && { justifyContent: 'space-between' },
    spaceAround && { justifyContent: 'space-around' },
    spaceEvenly && { justifyContent: 'space-evenly' },
    wrap && { flexWrap: 'wrap' },
    rowCenter && styles.rowCenter,
    alignStart && { alignItems: 'flex-start' },
    alignCenter && { alignItems: 'center' },
    alignEnd && { alignItems: 'flex-end' },
    justifyStart && { justifyContent: 'flex-start' },
    justifyCenter && { justifyContent: 'center' },
    justifyEnd && { justifyContent: 'flex-end' },
    overflow && { overflow },
    alignSelf && { alignSelf },
    zIndex && { zIndex },
    //size
    padding && { padding: hs(padding) },
    margin && { margin: hs(margin) },
    paddingVertical && { paddingVertical: hs(paddingVertical) },
    paddingHorizontal && { paddingHorizontal: hs(paddingHorizontal) },
    marginVertical && { marginVertical: hs(marginVertical) },
    marginHorizontal && { marginHorizontal: hs(marginHorizontal) },
    paddingTop && { paddingTop: hs(paddingTop) },
    paddingRight && { paddingRight: hs(paddingRight) },
    paddingBottom && { paddingBottom: hs(paddingBottom) },
    paddingLeft && { paddingLeft: hs(paddingLeft) },
    marginTop && { marginTop: hs(marginTop) },
    marginRight && { marginRight: hs(marginRight) },
    marginBottom && { marginBottom: hs(marginBottom) },
    marginLeft && { marginLeft: hs(marginLeft) },
    radius && { borderRadius: hs(radius) },
    borderTopLeftRadius && { borderTopLeftRadius: hs(borderTopLeftRadius) },
    borderTopRightRadius && { borderTopRightRadius: hs(borderTopRightRadius) },
    borderWidth && { borderWidth: hs(borderWidth) },
    borderTopWidth && { borderTopWidth: hs(borderTopWidth) },
    borderRightWidth && { borderRightWidth: hs(borderRightWidth) },
    borderBottomWidth && { borderBottomWidth: hs(borderBottomWidth) },
    borderLeftWidth && { borderLeftWidth: hs(borderLeftWidth) },
    translateY && { transform: [{ translateY: hs(translateY) }] },
    safeAreaTop && { paddingTop: insets.top },
    safeAreaBottom && { paddingTop: insets.bottom },
    //width, height
    width && { width: hs(width) },
    height && { height: hs(height) },
    maxWidth && { maxWidth: hs(width) },
    maxHeight && { maxHeight: vs(height) },
    round && handleRound(hs(round)),
    square && handleSquare(hs(square)),
    //color
    backgroundColor && {
      backgroundColor: COLORS[backgroundColor] || backgroundColor,
    },
    borderColor && {
      borderColor: COLORS[borderColor] || borderColor,
    },
    color && { color: COLORS[color] || color },
    opacity !== undefined && { opacity },
    //font
    fontFamily && { fontFamily: fontFamily },
    h1 && styles.h1,
    h2 && styles.h2,
    h3 && styles.h3,
    h4 && styles.h4,
    h5 && styles.h5,
    title && { fontSize: hs(32) },
    large && { fontSize: hs(18) },
    sizeMedium && { fontSize: hs(16) },
    small && { fontSize: hs(12) },
    tiny && { fontSize: hs(10) },
    heavy && { fontWeight: '700' },
    block && { fontWeight: '900' },
    regular && { fontFamily: FONTS.Regular },
    semiBold && { fontFamily: FONTS.SemiBold },
    bold && { fontFamily: FONTS.Bold },
    medium && { fontFamily: FONTS.Medium },
    light && { fontFamily: FONTS.Light },
    //text style
    center && { textAlign: 'center' },
    right && { textAlign: 'right' },
    fontSize && { fontSize: hs(fontSize) },
    italic && { fontStyle: 'italic' },
    normal && { fontStyle: 'normal' },
    uppercase && { textTransform: 'uppercase' },
    lowercase && { textTransform: 'lowercase' },
    capitalize && { textTransform: 'capitalize' },
    underline && { textDecorationLine: 'underline' },
    lineThrough && { textDecorationLine: 'line-through' },
    underlineLineThrough && { textDecorationLine: 'underline line-through' },
    includeFontPadding !== underline && { includeFontPadding },
    letterSpacing !== underline && { letterSpacing: letterSpacing },
    lineHeight && { lineHeight: hs(lineHeight) },
    //position
    relative && { position: 'relative' },
    absolute && { position: 'absolute' },
    absoluteFillObject && styles.absoluteFillObject,
    positionTop !== undefined && { top: hs(positionTop) },
    positionRight !== undefined && { right: hs(positionRight) },
    positionBottom !== undefined && { bottom: hs(positionBottom) },
    positionLeft !== undefined && { left: hs(positionLeft) },
    { ...StyleSheet.flatten(style) },
  ];

  return (
    <RNText {...rest} style={customStyles} numberOfLines={numberOfLines}>
      {children}
    </RNText>
  );
};

export default Text;
